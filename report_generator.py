#!/usr/bin/env python3
"""
Report Generator for Accommodation Search Results
Creates markdown and HTML reports with automatic browser opening
"""

import os
import json
import webbrowser
from datetime import datetime
from pathlib import Path
from typing import Dict, List, Any
from dataclasses import asdict
from advanced_accommodation_agent import SearchAnalysis, DetailedPropertyListing

class ReportGenerator:
    def __init__(self, output_dir: str = "output"):
        self.output_dir = Path(output_dir)
        self.output_dir.mkdir(exist_ok=True)
    
    def generate_markdown_report(self, analysis: SearchAnalysis, criteria: Any, filename: str = None) -> str:
        """Generate a markdown report from search analysis"""
        if filename is None:
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            filename = f"accommodation_report_{timestamp}"
        
        md_content = f"""# üè® Accommodation Search Report

## üìä Search Summary

**Location:** {criteria.location}  
**Dates:** {criteria.check_in} to {criteria.check_out}  
**Guests:** {criteria.guests}  
**Budget:** ${criteria.max_price_per_night}/night  
**Amenities:** {', '.join(criteria.amenities)}

### üìà Market Overview
- **Total Properties Found:** {analysis.total_properties_found}
- **Average Price:** ${analysis.average_price_per_night:.2f}/night
- **Price Range:** ${analysis.price_range[0]:.2f} - ${analysis.price_range[1]:.2f}

## üèÜ Top Recommendations

"""
        
        if analysis.best_value_properties:
            for i, prop in enumerate(analysis.best_value_properties[:5], 1):
                md_content += f"""### {i}. {prop.title}

**Platform:** {prop.platform}  
**Price:** ${prop.price_per_night}/night  
**Location:** {prop.location}  
**Rating:** {prop.rating}/5 (if available)  
**Overall Score:** {prop.overall_score:.1f}/100

**Book Here:** [{prop.url}]({prop.url})

"""
        else:
            md_content += "No properties found matching your criteria.\n\n"
        
        # Budget Options
        if analysis.budget_options:
            md_content += "## üí∞ Budget Options\n\n"
            for i, prop in enumerate(analysis.budget_options[:3], 1):
                md_content += f"{i}. **{prop.title}** - ${prop.price_per_night}/night ({prop.platform})\n"
            md_content += "\n"
        
        # Recommendations
        if analysis.recommendations:
            md_content += "## üí° Recommendations\n\n"
            for rec in analysis.recommendations:
                md_content += f"- {rec}\n"
            md_content += "\n"
        
        # Market Insights
        if analysis.market_insights:
            md_content += "## üìä Market Insights\n\n"
            
            # Platform comparison
            if 'platform_comparison' in analysis.market_insights:
                md_content += "### Platform Comparison\n\n"
                for platform, stats in analysis.market_insights['platform_comparison'].items():
                    md_content += f"**{platform}:** {stats['count']} properties, avg ${stats['avg_price']:.2f}/night\n"
                md_content += "\n"
            
            # Popular amenities
            if 'popular_amenities' in analysis.market_insights:
                md_content += "### Popular Amenities\n\n"
                for amenity, count in analysis.market_insights['popular_amenities'][:5]:
                    md_content += f"- {amenity}: {count} properties\n"
                md_content += "\n"
        
        # Booking Tips
        md_content += """## üéØ Booking Tips

- **Book Early:** Reserve 2-3 months in advance for best availability
- **Contact Hosts:** Reach out directly for longer stay discounts
- **Check Policies:** Review cancellation and house rules carefully
- **Travel Insurance:** Consider coverage for peace of mind
- **Off-Season:** Consider shoulder season for better prices

## üìÖ Search Details

**Search Date:** {datetime.now().strftime("%Y-%m-%d %H:%M:%S")}  
**Report Generated:** {datetime.now().strftime("%Y-%m-%d %H:%M:%S")}

---
*Generated by Accommodation Search Agent*
"""
        
        # Save markdown file
        md_file = self.output_dir / f"{filename}.md"
        with open(md_file, 'w', encoding='utf-8') as f:
            f.write(md_content)
        
        return str(md_file)
    
    def generate_html_report(self, analysis: SearchAnalysis, criteria: Any, filename: str = None) -> str:
        """Generate an HTML report from search analysis"""
        if filename is None:
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            filename = f"accommodation_report_{timestamp}"
        
        html_content = f"""<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>üè® Accommodation Search Report - {criteria.location}</title>
    <style>
        body {{
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            line-height: 1.6;
            margin: 0;
            padding: 20px;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
        }}
        .container {{
            max-width: 1200px;
            margin: 0 auto;
            background: white;
            border-radius: 15px;
            box-shadow: 0 10px 30px rgba(0,0,0,0.2);
            overflow: hidden;
        }}
        .header {{
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            padding: 30px;
            text-align: center;
        }}
        .header h1 {{
            margin: 0;
            font-size: 2.5em;
            font-weight: 300;
        }}
        .content {{
            padding: 30px;
        }}
        .summary {{
            background: #f8f9fa;
            border-radius: 10px;
            padding: 20px;
            margin-bottom: 30px;
        }}
        .summary-grid {{
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 20px;
            margin-top: 20px;
        }}
        .summary-item {{
            background: white;
            padding: 15px;
            border-radius: 8px;
            box-shadow: 0 2px 5px rgba(0,0,0,0.1);
        }}
        .summary-item h3 {{
            margin: 0 0 10px 0;
            color: #667eea;
        }}
        .property-card {{
            background: white;
            border: 1px solid #e9ecef;
            border-radius: 10px;
            padding: 20px;
            margin-bottom: 20px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
            transition: transform 0.2s;
        }}
        .property-card:hover {{
            transform: translateY(-2px);
            box-shadow: 0 4px 20px rgba(0,0,0,0.15);
        }}
        .property-header {{
            display: flex;
            justify-content: space-between;
            align-items: flex-start;
            margin-bottom: 15px;
        }}
        .property-title {{
            font-size: 1.3em;
            font-weight: 600;
            color: #2c3e50;
            margin: 0;
        }}
        .property-price {{
            background: #667eea;
            color: white;
            padding: 8px 15px;
            border-radius: 20px;
            font-weight: 600;
        }}
        .property-details {{
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
            gap: 10px;
            margin-bottom: 15px;
        }}
        .detail-item {{
            display: flex;
            align-items: center;
            gap: 5px;
        }}
        .detail-label {{
            font-weight: 600;
            color: #6c757d;
        }}
        .book-button {{
            background: #28a745;
            color: white;
            padding: 10px 20px;
            border: none;
            border-radius: 5px;
            text-decoration: none;
            display: inline-block;
            transition: background 0.2s;
        }}
        .book-button:hover {{
            background: #218838;
        }}
        .section {{
            margin-bottom: 40px;
        }}
        .section h2 {{
            color: #2c3e50;
            border-bottom: 3px solid #667eea;
            padding-bottom: 10px;
            margin-bottom: 20px;
        }}
        .recommendations {{
            background: #e8f5e8;
            border-left: 4px solid #28a745;
            padding: 20px;
            border-radius: 5px;
        }}
        .recommendations ul {{
            margin: 0;
            padding-left: 20px;
        }}
        .tips {{
            background: #fff3cd;
            border-left: 4px solid #ffc107;
            padding: 20px;
            border-radius: 5px;
        }}
        .platform-badge {{
            background: #6c757d;
            color: white;
            padding: 4px 8px;
            border-radius: 12px;
            font-size: 0.8em;
            font-weight: 600;
        }}
        .rating {{
            color: #ffc107;
            font-weight: 600;
        }}
        .footer {{
            background: #f8f9fa;
            padding: 20px;
            text-align: center;
            color: #6c757d;
            border-top: 1px solid #e9ecef;
        }}
        @media (max-width: 768px) {{
            .summary-grid {{
                grid-template-columns: 1fr;
            }}
            .property-header {{
                flex-direction: column;
                gap: 10px;
            }}
        }}
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>üè® Accommodation Search Report</h1>
            <p>Your personalized accommodation recommendations for {criteria.location}</p>
        </div>
        
        <div class="content">
            <div class="summary">
                <h2>üìä Search Summary</h2>
                <div class="summary-grid">
                    <div class="summary-item">
                        <h3>üìç Location</h3>
                        <p>{criteria.location}</p>
                    </div>
                    <div class="summary-item">
                        <h3>üìÖ Dates</h3>
                        <p>{criteria.check_in} to {criteria.check_out}</p>
                    </div>
                    <div class="summary-item">
                        <h3>üë• Guests</h3>
                        <p>{criteria.guests}</p>
                    </div>
                    <div class="summary-item">
                        <h3>üí∞ Budget</h3>
                        <p>${criteria.max_price_per_night}/night</p>
                    </div>
                </div>
                
                <div class="summary-grid" style="margin-top: 20px;">
                    <div class="summary-item">
                        <h3>üè† Total Properties</h3>
                        <p>{analysis.total_properties_found}</p>
                    </div>
                    <div class="summary-item">
                        <h3>üìà Average Price</h3>
                        <p>${analysis.average_price_per_night:.2f}/night</p>
                    </div>
                    <div class="summary-item">
                        <h3>üí∞ Price Range</h3>
                        <p>${analysis.price_range[0]:.2f} - ${analysis.price_range[1]:.2f}</p>
                    </div>
                </div>
            </div>
            
            <div class="section">
                <h2>üèÜ Top Recommendations</h2>
"""
        
        if analysis.best_value_properties:
            for i, prop in enumerate(analysis.best_value_properties[:5], 1):
                rating_html = f"<span class='rating'>‚òÖ {prop.rating}/5</span>" if prop.rating else "No rating"
                html_content += f"""
                <div class="property-card">
                    <div class="property-header">
                        <h3 class="property-title">{i}. {prop.title}</h3>
                        <div class="property-price">${prop.price_per_night}/night</div>
                    </div>
                    <div class="property-details">
                        <div class="detail-item">
                            <span class="detail-label">Platform:</span>
                            <span class="platform-badge">{prop.platform}</span>
                        </div>
                        <div class="detail-item">
                            <span class="detail-label">Location:</span>
                            <span>{prop.location}</span>
                        </div>
                        <div class="detail-item">
                            <span class="detail-label">Rating:</span>
                            <span>{rating_html}</span>
                        </div>
                        <div class="detail-item">
                            <span class="detail-label">Score:</span>
                            <span>{prop.overall_score:.1f}/100</span>
                        </div>
                    </div>
                    <a href="{prop.url}" target="_blank" class="book-button">Book Now</a>
                </div>
"""
        else:
            html_content += """
                <div class="property-card">
                    <p>No properties found matching your criteria.</p>
                </div>
"""
        
        # Budget Options
        if analysis.budget_options:
            html_content += """
            <div class="section">
                <h2>üí∞ Budget Options</h2>
"""
            for i, prop in enumerate(analysis.budget_options[:3], 1):
                html_content += f"""
                <div class="property-card">
                    <div class="property-header">
                        <h3 class="property-title">{i}. {prop.title}</h3>
                        <div class="property-price">${prop.price_per_night}/night</div>
                    </div>
                    <div class="property-details">
                        <div class="detail-item">
                            <span class="detail-label">Platform:</span>
                            <span class="platform-badge">{prop.platform}</span>
                        </div>
                        <div class="detail-item">
                            <span class="detail-label">Location:</span>
                            <span>{prop.location}</span>
                        </div>
                    </div>
                    <a href="{prop.url}" target="_blank" class="book-button">Book Now</a>
                </div>
"""
            html_content += "</div>"
        
        # Recommendations
        if analysis.recommendations:
            html_content += """
            <div class="section">
                <h2>üí° Recommendations</h2>
                <div class="recommendations">
                    <ul>
"""
            for rec in analysis.recommendations:
                html_content += f"<li>{rec}</li>"
            html_content += """
                    </ul>
                </div>
            </div>
"""
        
        # Market Insights
        if analysis.market_insights:
            html_content += """
            <div class="section">
                <h2>üìä Market Insights</h2>
"""
            
            # Platform comparison
            if 'platform_comparison' in analysis.market_insights:
                html_content += "<h3>Platform Comparison</h3><div class='summary-grid'>"
                for platform, stats in analysis.market_insights['platform_comparison'].items():
                    html_content += f"""
                    <div class="summary-item">
                        <h3>{platform}</h3>
                        <p>{stats['count']} properties</p>
                        <p>Avg: ${stats['avg_price']:.2f}/night</p>
                    </div>
"""
                html_content += "</div>"
            
            # Popular amenities
            if 'popular_amenities' in analysis.market_insights:
                html_content += "<h3>Popular Amenities</h3><div class='summary-grid'>"
                for amenity, count in analysis.market_insights['popular_amenities'][:5]:
                    html_content += f"""
                    <div class="summary-item">
                        <h3>{amenity.title()}</h3>
                        <p>{count} properties</p>
                    </div>
"""
                html_content += "</div>"
            
            html_content += "</div>"
        
        # Booking Tips
        html_content += """
            <div class="section">
                <h2>üéØ Booking Tips</h2>
                <div class="tips">
                    <ul>
                        <li><strong>Book Early:</strong> Reserve 2-3 months in advance for best availability</li>
                        <li><strong>Contact Hosts:</strong> Reach out directly for longer stay discounts</li>
                        <li><strong>Check Policies:</strong> Review cancellation and house rules carefully</li>
                        <li><strong>Travel Insurance:</strong> Consider coverage for peace of mind</li>
                        <li><strong>Off-Season:</strong> Consider shoulder season for better prices</li>
                    </ul>
                </div>
            </div>
        </div>
        
        <div class="footer">
            <p><strong>Search Date:</strong> {datetime.now().strftime("%Y-%m-%d %H:%M:%S")}</p>
            <p><strong>Report Generated:</strong> {datetime.now().strftime("%Y-%m-%d %H:%M:%S")}</p>
            <p><em>Generated by Accommodation Search Agent</em></p>
        </div>
    </div>
</body>
</html>
"""
        
        # Save HTML file
        html_file = self.output_dir / f"{filename}.html"
        with open(html_file, 'w', encoding='utf-8') as f:
            f.write(html_content)
        
        return str(html_file)
    
    def open_in_browser(self, html_file: str):
        """Open the HTML report in the default browser"""
        try:
            # Convert to absolute path
            abs_path = os.path.abspath(html_file)
            # Open in browser
            webbrowser.open(f'file://{abs_path}')
            print(f"üåê Opened report in browser: {abs_path}")
        except Exception as e:
            print(f"‚ùå Could not open browser: {e}")
    
    def generate_reports(self, analysis: SearchAnalysis, criteria: Any, filename: str = None, open_browser: bool = True):
        """Generate both markdown and HTML reports"""
        print("üìù Generating reports...")
        
        # Generate markdown report
        md_file = self.generate_markdown_report(analysis, criteria, filename)
        print(f"üìÑ Markdown report saved: {md_file}")
        
        # Generate HTML report
        html_file = self.generate_html_report(analysis, criteria, filename)
        print(f"üåê HTML report saved: {html_file}")
        
        # Open in browser if requested
        if open_browser:
            self.open_in_browser(html_file)
        
        return md_file, html_file
